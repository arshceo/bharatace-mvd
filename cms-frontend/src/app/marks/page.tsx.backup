"use client";

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import SidebarLayout from '@/components/SidebarLayout';
import { marks, students, subjects } from '@/lib/api';
import { useCachedData } from '@/lib/hooks/useCachedData';
import { CacheKeys, invalidateCache } from '@/lib/cache';
import { Search, Plus, Edit2, Trash2, Award, X, ChevronDown, ChevronRight, Filter } from 'lucide-react';

interface Mark {
  id: string;
  student_id: string;
  subject_id: string;
  obtained_marks: number;
  max_marks: number;
  exam_type: string;
  exam_date: string;
  remarks: string;
  students: {
    full_name: string;
    roll_number: string;
    department: string;
    semester: number;
  };
  subjects: {
    subject_name: string;
    subject_code: string;
  };
}

interface OrganizedMarks {
  [department: string]: {
    [semester: string]: {
      [examType: string]: {
        [studentId: string]: {
          studentName: string;
          rollNumber: string;
          marks: Mark[];
        };
      };
    };
  };
}

export default function MarksPage() {
  const router = useRouter();
  const [errorDetails, setErrorDetails] = useState<string>('');
  const [hasToken, setHasToken] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterDepartment, setFilterDepartment] = useState('all');
  const [filterSemester, setFilterSemester] = useState('all');
  const [filterExamType, setFilterExamType] = useState('all');
  const [expandedDepts, setExpandedDepts] = useState<Set<string>>(new Set());
  const [expandedSems, setExpandedSems] = useState<Set<string>>(new Set());
  const [expandedExams, setExpandedExams] = useState<Set<string>>(new Set());
  const [expandedStudents, setExpandedStudents] = useState<Set<string>>(new Set());
  
  const { data: marksData, loading, error, refetch } = useCachedData({
    cacheKey: CacheKeys.marks(),
    fetchFn: async () => {
      try {
        const token = sessionStorage.getItem('admin_token');
        
        if (!token) {
          console.error('‚ùå NO TOKEN FOUND - Please login first!');
          throw new Error('No authentication token found. Please log in.');
        }
        
        console.log('‚úÖ Token exists, fetching marks...');
        const response = await marks.getAll();
        const marksArray = response.data.marks || response.data || [];
        console.log('‚úÖ Marks loaded successfully:', Array.isArray(marksArray) ? marksArray.length : 0, 'entries');
        console.log('üìä Sample mark:', marksArray[0]);
        return Array.isArray(marksArray) ? marksArray : [];
      } catch (err: any) {
        console.error('‚ùå Error fetching marks:', err.message);
        setErrorDetails(err.message || 'Unknown error');
        throw err;
      }
    },
  });

  useEffect(() => {
    const token = sessionStorage.getItem('admin_token');
    const isAuthenticated = sessionStorage.getItem('bharatace_authenticated') === 'true';
    
    if (!token || !isAuthenticated) {
      console.warn('No admin token found, redirecting to login');
      router.push('/');
      return;
    }
    
    setHasToken(true);
  }, [router]);

  // Filter marks based on search and filters
  const filteredMarks = marksData?.filter((mark) => {
    const matchesSearch = 
      mark.students?.full_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      mark.students?.roll_number?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      mark.subjects?.subject_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
      mark.subjects?.subject_code?.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesDept = filterDepartment === 'all' || mark.students?.department === filterDepartment;
    const matchesSem = filterSemester === 'all' || mark.students?.semester?.toString() === filterSemester;
    const matchesExam = filterExamType === 'all' || mark.exam_type === filterExamType;
    
    return matchesSearch && matchesDept && matchesSem && matchesExam;
  }) || [];

  // Get unique values for filters
  const departments = Array.from(new Set(marksData?.map(m => m.students?.department).filter(Boolean))) as string[];
  const semesters = Array.from(new Set(marksData?.map(m => m.students?.semester).filter(Boolean))).sort((a, b) => Number(a) - Number(b));
  const examTypes = Array.from(new Set(marksData?.map(m => m.exam_type).filter(Boolean))) as string[];

  // Organize marks by department ‚Üí semester ‚Üí exam type ‚Üí student ‚Üí subjects
  const organizeMarks = (marks: Mark[]): OrganizedMarks => {
    const organized: OrganizedMarks = {};
    
    marks.forEach((mark) => {
      if (!mark.students) return;
      
      const dept = mark.students.department || 'Unknown Department';
      const sem = `Semester ${mark.students.semester || 'Unknown'}`;
      const examType = mark.exam_type || 'Unknown Exam';
      const studentId = mark.student_id;
      
      if (!organized[dept]) organized[dept] = {};
      if (!organized[dept][sem]) organized[dept][sem] = {};
      if (!organized[dept][sem][examType]) organized[dept][sem][examType] = {};
      if (!organized[dept][sem][examType][studentId]) {
        organized[dept][sem][examType][studentId] = {
          studentName: mark.students.full_name || 'Unknown Student',
          rollNumber: mark.students.roll_number || 'N/A',
          marks: []
        };
      }
      
      organized[dept][sem][examType][studentId].marks.push(mark);
    });
    
    return organized;
  };

  const toggleDept = (dept: string) => {
    const newExpanded = new Set(expandedDepts);
    if (newExpanded.has(dept)) {
      newExpanded.delete(dept);
    } else {
      newExpanded.add(dept);
    }
    setExpandedDepts(newExpanded);
  };

  const toggleSem = (key: string) => {
    const newExpanded = new Set(expandedSems);
    if (newExpanded.has(key)) {
      newExpanded.delete(key);
    } else {
      newExpanded.add(key);
    }
    setExpandedSems(newExpanded);
  };

  const toggleExam = (key: string) => {
    const newExpanded = new Set(expandedExams);
    if (newExpanded.has(key)) {
      newExpanded.delete(key);
    } else {
      newExpanded.add(key);
    }
    setExpandedExams(newExpanded);
  };

  const toggleStudent = (key: string) => {
    const newExpanded = new Set(expandedStudents);
    if (newExpanded.has(key)) {
      newExpanded.delete(key);
    } else {
      newExpanded.add(key);
    }
    setExpandedStudents(newExpanded);
  };

  const organizedData = filteredMarks ? organizeMarks(filteredMarks) : {};

  return (
    <SidebarLayout>
      <div className="p-8 bg-gray-900 min-h-screen">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-white">Marks Management</h1>
          <p className="text-gray-400">Student exam marks organized by department, semester, exam type, and student</p>
        </div>

        {!hasToken ? (
          <div className="bg-amber-900/50 border-l-4 border-amber-500 rounded-lg shadow-md p-6">
            <div className="flex items-start">
              <Award className="h-6 w-6 text-amber-400 mr-3 mt-0.5" />
              <div>
                <h3 className="text-lg font-semibold text-amber-200 mb-2">Authentication Required</h3>
                <p className="text-amber-300">Redirecting to login...</p>
              </div>
            </div>
          </div>
        ) : loading ? (
          <div className="bg-gray-800 rounded-lg shadow-md p-12 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="text-gray-300 mt-4">Loading marks...</p>
          </div>
        ) : error ? (
          <div className="bg-red-900/50 border-l-4 border-red-500 rounded-lg shadow-md p-6">
            <div className="flex items-start">
              <Award className="h-6 w-6 text-red-400 mr-3 mt-0.5 flex-shrink-0" />
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-red-200 mb-2">‚ùå Cannot Load Marks Data</h3>
                <p className="text-red-300 mb-4 font-medium">{errorDetails || 'Network Error'}</p>
                
                <div className="bg-blue-900/50 border border-blue-700 rounded-lg p-4 mb-4">
                  <h4 className="font-semibold text-blue-200 mb-2">üîê Need to Login?</h4>
                  <div className="text-sm text-blue-300 space-y-1">
                    <p><strong>Email:</strong> <code className="bg-blue-800 px-2 py-0.5 rounded">admin@bharatace.com</code></p>
                    <p><strong>Password:</strong> <code className="bg-blue-800 px-2 py-0.5 rounded">Admin@123456</code></p>
                  </div>
                </div>
                
                <div className="flex gap-3">
                  <button
                    onClick={() => refetch()}
                    className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium"
                  >
                    üîÑ Retry
                  </button>
                  <button
                    onClick={() => {
                      sessionStorage.clear();
                      router.push('/');
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium"
                  >
                    üîê Go to Login
                  </button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Search and Filters */}
            <div className="bg-gray-800 rounded-lg shadow-md p-4 border border-gray-700">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div className="lg:col-span-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                    <input
                      type="text"
                      placeholder="Search student, roll number, subject..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    />
                  </div>
                </div>
                <select
                  value={filterDepartment}
                  onChange={(e) => setFilterDepartment(e.target.value)}
                  className="px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Departments</option>
                  {departments.map((dept) => (
                    <option key={dept} value={dept}>{dept}</option>
                  ))}
                </select>
                <select
                  value={filterSemester}
                  onChange={(e) => setFilterSemester(e.target.value)}
                  className="px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Semesters</option>
                  {semesters.map((sem) => (
                    <option key={sem} value={sem}>Semester {sem}</option>
                  ))}
                </select>
                <select
                  value={filterExamType}
                  onChange={(e) => setFilterExamType(e.target.value)}
                  className="px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg text-white focus:ring-2 focus:ring-blue-500"
                >
                  <option value="all">All Exam Types</option>
                  {examTypes.map((type) => (
                    <option key={type} value={type}>{type.charAt(0).toUpperCase() + type.slice(1)}</option>
                  ))}
                </select>
              </div>
            </div>

            {/* Header Card */}
            <div className="bg-gray-800 rounded-lg shadow-md p-6 border border-gray-700">
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-lg font-semibold text-white">Total Marks Entries: {marksData?.length || 0}</p>
                  <p className="text-sm text-gray-400">Showing: {filteredMarks.length} entries</p>
                  <p className="text-sm text-green-400 mt-2">‚úì Caching active - instant navigation!</p>
                </div>
                {(searchQuery || filterDepartment !== 'all' || filterSemester !== 'all' || filterExamType !== 'all') && (
                  <button
                    onClick={() => {
                      setSearchQuery('');
                      setFilterDepartment('all');
                      setFilterSemester('all');
                      setFilterExamType('all');
                    }}
                    className="px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg border border-gray-600"
                  >
                    Clear Filters
                  </button>
                )}
              </div>
              {filteredMarks.length === 0 && marksData && marksData.length > 0 && (
                <p className="text-sm text-amber-400 mt-2">‚ÑπÔ∏è No marks match your filters</p>
              )}
              {marksData?.length === 0 && (
                <p className="text-sm text-amber-400 mt-2">‚ÑπÔ∏è No marks data in database yet</p>
              )}
            </div>
            
            {/* Organized Marks Display */}
            {filteredMarks && filteredMarks.length > 0 && (
              <div className="space-y-4">
                {Object.keys(organizedData).sort().map((department) => (
                  <div key={department} className="bg-gray-800 rounded-lg shadow-md border border-gray-700 overflow-hidden">
                    {/* Department Header */}
                    <button
                      onClick={() => toggleDept(department)}
                      className="w-full px-6 py-4 bg-indigo-900/50 hover:bg-indigo-900/70 flex items-center justify-between text-left transition-colors"
                    >
                      <div className="flex items-center">
                        {expandedDepts.has(department) ? (
                          <ChevronDown className="w-5 h-5 text-indigo-300 mr-3" />
                        ) : (
                          <ChevronRight className="w-5 h-5 text-indigo-300 mr-3" />
                        )}
                        <h2 className="text-xl font-bold text-white">{department}</h2>
                      </div>
                      <span className="text-sm text-indigo-300">
                        {Object.values(organizedData[department]).reduce((sum, sem) => 
                          sum + Object.values(sem).reduce((s, exam) => s + Object.keys(exam).length, 0), 0
                        )} students
                      </span>
                    </button>
                    
                    {/* Semesters */}
                    {expandedDepts.has(department) && (
                      <div className="p-4 space-y-3">
                        {Object.keys(organizedData[department]).sort().map((semester) => {
                          const semKey = `${department}-${semester}`;
                          return (
                            <div key={semKey} className="bg-gray-700/50 rounded-lg overflow-hidden">
                              {/* Semester Header */}
                              <button
                                onClick={() => toggleSem(semKey)}
                                className="w-full px-4 py-3 bg-blue-900/30 hover:bg-blue-900/50 flex items-center justify-between text-left transition-colors"
                              >
                                <div className="flex items-center">
                                  {expandedSems.has(semKey) ? (
                                    <ChevronDown className="w-4 h-4 text-blue-300 mr-2" />
                                  ) : (
                                    <ChevronRight className="w-4 h-4 text-blue-300 mr-2" />
                                  )}
                                  <h3 className="text-lg font-semibold text-white">{semester}</h3>
                                </div>
                                <span className="text-sm text-blue-300">
                                  {Object.values(organizedData[department][semester]).reduce((sum, exam) => 
                                    sum + Object.keys(exam).length, 0
                                  )} students
                                </span>
                              </button>
                              
                              {/* Exam Types */}
                              {expandedSems.has(semKey) && (
                                <div className="p-3 space-y-2">
                                  {Object.keys(organizedData[department][semester]).sort().map((examType) => {
                                    const examKey = `${semKey}-${examType}`;
                                    return (
                                      <div key={examKey} className="bg-gray-800/50 rounded-lg overflow-hidden">
                                        {/* Exam Type Header */}
                                        <button
                                          onClick={() => toggleExam(examKey)}
                                          className="w-full px-4 py-3 bg-purple-900/30 hover:bg-purple-900/50 flex items-center justify-between text-left transition-colors"
                                        >
                                          <div className="flex items-center">
                                            {expandedExams.has(examKey) ? (
                                              <ChevronDown className="w-4 h-4 text-purple-300 mr-2" />
                                            ) : (
                                              <ChevronRight className="w-4 h-4 text-purple-300 mr-2" />
                                            )}
                                            <h4 className="text-base font-semibold text-white capitalize">{examType}</h4>
                                          </div>
                                          <span className="text-sm text-purple-300">
                                            {Object.keys(organizedData[department][semester][examType]).length} students
                                          </span>
                                        </button>
                                        
                                        {/* Students */}
                                        {expandedExams.has(examKey) && (
                                          <div className="p-3 space-y-2">
                                            {Object.entries(organizedData[department][semester][examType]).map(([studentId, studentData]) => {
                                              const studentKey = `${examKey}-${studentId}`;
                                              return (
                                                <div key={studentKey} className="bg-gray-800 rounded-lg overflow-hidden border border-gray-600">
                                                  {/* Student Header */}
                                                  <button
                                                    onClick={() => toggleStudent(studentKey)}
                                                    className="w-full px-4 py-3 bg-gray-700/50 hover:bg-gray-700 flex items-center justify-between text-left transition-colors"
                                                  >
                                                    <div className="flex items-center">
                                                      {expandedStudents.has(studentKey) ? (
                                                        <ChevronDown className="w-4 h-4 text-gray-300 mr-2" />
                                                      ) : (
                                                        <ChevronRight className="w-4 h-4 text-gray-300 mr-2" />
                                                      )}
                                                      <div>
                                                        <p className="font-semibold text-white">{studentData.studentName}</p>
                                                        <p className="text-sm text-gray-400">Roll: {studentData.rollNumber}</p>
                                                      </div>
                                                    </div>
                                                    <span className="text-sm text-gray-400">
                                                      {studentData.marks.length} subjects
                                                    </span>
                                                  </button>
                                                  
                                                  {/* Subject Marks Table */}
                                                  {expandedStudents.has(studentKey) && (
                                                    <div className="overflow-x-auto">
                                                      <table className="w-full">
                                                        <thead className="bg-gray-900">
                                                          <tr>
                                                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Subject</th>
                                                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Marks</th>
                                                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Percentage</th>
                                                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Date</th>
                                                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Remarks</th>
                                                          </tr>
                                                        </thead>
                                                        <tbody className="divide-y divide-gray-700">
                                                          {studentData.marks.map((mark) => {
                                                            const percentage = ((mark.obtained_marks / mark.max_marks) * 100).toFixed(1);
                                                            return (
                                                              <tr key={mark.id} className="hover:bg-gray-700/30">
                                                                <td className="px-4 py-3">
                                                                  <div className="text-sm font-medium text-white">
                                                                    {mark.subjects?.subject_name || 'Unknown'}
                                                                  </div>
                                                                  <div className="text-xs text-gray-400">
                                                                    {mark.subjects?.subject_code}
                                                                  </div>
                                                                </td>
                                                                <td className="px-4 py-3 text-sm font-medium text-white">
                                                                  {mark.obtained_marks} / {mark.max_marks}
                                                                </td>
                                                                <td className="px-4 py-3">
                                                                  <span className={`text-sm font-semibold ${
                                                                    parseFloat(percentage) >= 75 ? 'text-green-400' : 
                                                                    parseFloat(percentage) >= 60 ? 'text-blue-400' : 
                                                                    parseFloat(percentage) >= 40 ? 'text-yellow-400' : 
                                                                    'text-red-400'
                                                                  }`}>
                                                                    {percentage}%
                                                                  </span>
                                                                </td>
                                                                <td className="px-4 py-3 text-sm text-gray-400">
                                                                  {mark.exam_date ? new Date(mark.exam_date).toLocaleDateString() : '-'}
                                                                </td>
                                                                <td className="px-4 py-3 text-sm text-gray-400">
                                                                  {mark.remarks || '-'}
                                                                </td>
                                                              </tr>
                                                            );
                                                          })}
                                                        </tbody>
                                                      </table>
                                                    </div>
                                                  )}
                                                </div>
                                              );
                                            })}
                                          </div>
                                        )}
                                      </div>
                                    );
                                  })}
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </SidebarLayout>
  );
}

        {!hasToken ? (
          <div className="bg-amber-900/50 border-l-4 border-amber-500 rounded-lg shadow-md p-6">
            <div className="flex items-start">
              <Award className="h-6 w-6 text-amber-400 mr-3 mt-0.5" />
              <div>
                <h3 className="text-lg font-semibold text-amber-200 mb-2">Authentication Required</h3>
                <p className="text-amber-300">Redirecting to login...</p>
              </div>
            </div>
          </div>
        ) : loading ? (
          <div className="bg-gray-800 rounded-lg shadow-md p-12 text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
            <p className="text-gray-300 mt-4">Loading marks...</p>
          </div>
        ) : error ? (
          <div className="bg-red-900/50 border-l-4 border-red-500 rounded-lg shadow-md p-6">
            <div className="flex items-start">
              <Award className="h-6 w-6 text-red-400 mr-3 mt-0.5 flex-shrink-0" />
              <div className="flex-1">
                <h3 className="text-lg font-semibold text-red-200 mb-2">‚ùå Cannot Load Marks Data</h3>
                <p className="text-red-300 mb-4 font-medium">{errorDetails || 'Network Error'}</p>
                
                <div className="bg-blue-900/50 border border-blue-700 rounded-lg p-4 mb-4">
                  <h4 className="font-semibold text-blue-200 mb-2">üîê Need to Login?</h4>
                  <div className="text-sm text-blue-300 space-y-1">
                    <p><strong>Email:</strong> <code className="bg-blue-800 px-2 py-0.5 rounded">admin@bharatace.com</code></p>
                    <p><strong>Password:</strong> <code className="bg-blue-800 px-2 py-0.5 rounded">Admin@123456</code></p>
                  </div>
                </div>
                
                <div className="flex gap-3">
                  <button
                    onClick={() => refetch()}
                    className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium"
                  >
                    üîÑ Retry
                  </button>
                  <button
                    onClick={() => {
                      sessionStorage.clear();
                      router.push('/');
                    }}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium"
                  >
                    üîê Go to Login
                  </button>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            {/* Header Card */}
            <div className="bg-gray-800 rounded-lg shadow-md p-6 border border-gray-700">
              <p className="text-lg font-semibold text-white">Total Marks Entries: {marksData?.length || 0}</p>
              <p className="text-sm text-green-400 mt-2">‚úì Caching active - instant navigation!</p>
              {marksData?.length === 0 && (
                <p className="text-sm text-amber-400 mt-2">‚ÑπÔ∏è No marks data in database yet</p>
              )}
            </div>
            
            {/* Organized Marks Display */}
            {marksData && marksData.length > 0 && (
              <div className="space-y-4">
                {Object.keys(organizedData).sort().map((department) => (
                  <div key={department} className="bg-gray-800 rounded-lg shadow-md border border-gray-700 overflow-hidden">
                    {/* Department Header */}
                    <button
                      onClick={() => toggleDept(department)}
                      className="w-full px-6 py-4 bg-indigo-900/50 hover:bg-indigo-900/70 flex items-center justify-between text-left transition-colors"
                    >
                      <div className="flex items-center">
                        {expandedDepts.has(department) ? (
                          <ChevronDown className="w-5 h-5 text-indigo-300 mr-3" />
                        ) : (
                          <ChevronRight className="w-5 h-5 text-indigo-300 mr-3" />
                        )}
                        <h2 className="text-xl font-bold text-white">{department}</h2>
                      </div>
                      <span className="text-sm text-indigo-300">
                        {Object.values(organizedData[department]).reduce((sum, sem) => 
                          sum + Object.keys(sem).length, 0
                        )} students
                      </span>
                    </button>
                    
                    {/* Semesters */}
                    {expandedDepts.has(department) && (
                      <div className="p-4 space-y-3">
                        {Object.keys(organizedData[department]).sort().map((semester) => {
                          const semKey = `${department}-${semester}`;
                          return (
                            <div key={semKey} className="bg-gray-700/50 rounded-lg overflow-hidden">
                              {/* Semester Header */}
                              <button
                                onClick={() => toggleSem(semKey)}
                                className="w-full px-4 py-3 bg-blue-900/30 hover:bg-blue-900/50 flex items-center justify-between text-left transition-colors"
                              >
                                <div className="flex items-center">
                                  {expandedSems.has(semKey) ? (
                                    <ChevronDown className="w-4 h-4 text-blue-300 mr-2" />
                                  ) : (
                                    <ChevronRight className="w-4 h-4 text-blue-300 mr-2" />
                                  )}
                                  <h3 className="text-lg font-semibold text-white">{semester}</h3>
                                </div>
                                <span className="text-sm text-blue-300">
                                  {Object.keys(organizedData[department][semester]).length} students
                                </span>
                              </button>
                              
                              {/* Students */}
                              {expandedSems.has(semKey) && (
                                <div className="p-3 space-y-2">
                                  {Object.entries(organizedData[department][semester]).map(([studentId, studentData]) => {
                                    const studentKey = `${semKey}-${studentId}`;
                                    return (
                                      <div key={studentKey} className="bg-gray-800 rounded-lg overflow-hidden border border-gray-600">
                                        {/* Student Header */}
                                        <button
                                          onClick={() => toggleStudent(studentKey)}
                                          className="w-full px-4 py-3 bg-gray-700/50 hover:bg-gray-700 flex items-center justify-between text-left transition-colors"
                                        >
                                          <div className="flex items-center">
                                            {expandedStudents.has(studentKey) ? (
                                              <ChevronDown className="w-4 h-4 text-gray-300 mr-2" />
                                            ) : (
                                              <ChevronRight className="w-4 h-4 text-gray-300 mr-2" />
                                            )}
                                            <div>
                                              <p className="font-semibold text-white">{studentData.studentName}</p>
                                              <p className="text-sm text-gray-400">Roll: {studentData.rollNumber}</p>
                                            </div>
                                          </div>
                                          <span className="text-sm text-gray-400">
                                            {studentData.marks.length} subjects
                                          </span>
                                        </button>
                                        
                                        {/* Subject Marks Table */}
                                        {expandedStudents.has(studentKey) && (
                                          <div className="overflow-x-auto">
                                            <table className="w-full">
                                              <thead className="bg-gray-900">
                                                <tr>
                                                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Subject</th>
                                                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Exam Type</th>
                                                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Marks</th>
                                                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Percentage</th>
                                                  <th className="px-4 py-2 text-left text-xs font-medium text-gray-300 uppercase">Date</th>
                                                </tr>
                                              </thead>
                                              <tbody className="divide-y divide-gray-700">
                                                {studentData.marks.map((mark) => {
                                                  const percentage = ((mark.obtained_marks / mark.max_marks) * 100).toFixed(1);
                                                  return (
                                                    <tr key={mark.id} className="hover:bg-gray-700/30">
                                                      <td className="px-4 py-3">
                                                        <div className="text-sm font-medium text-white">
                                                          {mark.subjects?.subject_name || 'Unknown'}
                                                        </div>
                                                        <div className="text-xs text-gray-400">
                                                          {mark.subjects?.subject_code}
                                                        </div>
                                                      </td>
                                                      <td className="px-4 py-3">
                                                        <span className="px-2 py-1 text-xs rounded-full bg-blue-900/50 text-blue-300 border border-blue-700">
                                                          {mark.exam_type}
                                                        </span>
                                                      </td>
                                                      <td className="px-4 py-3 text-sm font-medium text-white">
                                                        {mark.obtained_marks} / {mark.max_marks}
                                                      </td>
                                                      <td className="px-4 py-3">
                                                        <span className={`text-sm font-semibold ${
                                                          parseFloat(percentage) >= 75 ? 'text-green-400' : 
                                                          parseFloat(percentage) >= 60 ? 'text-blue-400' : 
                                                          parseFloat(percentage) >= 40 ? 'text-yellow-400' : 
                                                          'text-red-400'
                                                        }`}>
                                                          {percentage}%
                                                        </span>
                                                      </td>
                                                      <td className="px-4 py-3 text-sm text-gray-400">
                                                        {mark.exam_date ? new Date(mark.exam_date).toLocaleDateString() : '-'}
                                                      </td>
                                                    </tr>
                                                  );
                                                })}
                                              </tbody>
                                            </table>
                                          </div>
                                        )}
                                      </div>
                                    );
                                  })}
                                </div>
                              )}
                            </div>
                          );
                        })}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </SidebarLayout>
  );
}
